[{"F:\\github\\Project_Imageprocessing_Trainmodel\\ui\\src\\index.js":"1","F:\\github\\Project_Imageprocessing_Trainmodel\\ui\\src\\App.js":"2","F:\\github\\Project_Imageprocessing_Trainmodel\\ui\\src\\reportWebVitals.js":"3","F:\\github\\Project_Imageprocessing_Trainmodel\\ui\\src\\components\\Main.js":"4","F:\\github\\Project_Imageprocessing_Trainmodel\\ui\\src\\components\\NavigationBar.js":"5","F:\\github\\Project_Imageprocessing_Trainmodel\\ui\\src\\components\\Dashboard.js":"6"},{"size":547,"mtime":1607426167664,"results":"7","hashOfConfig":"8"},{"size":158,"mtime":1607425880230,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":363,"mtime":1607426395063,"results":"11","hashOfConfig":"8"},{"size":354,"mtime":1607426267797,"results":"12","hashOfConfig":"8"},{"size":11216,"mtime":1607474928596,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1de8enu",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"F:\\github\\Project_Imageprocessing_Trainmodel\\ui\\src\\index.js",[],["29","30"],"F:\\github\\Project_Imageprocessing_Trainmodel\\ui\\src\\App.js",["31"],"import logo from './logo.svg';\nimport './App.css';\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","F:\\github\\Project_Imageprocessing_Trainmodel\\ui\\src\\reportWebVitals.js",[],"F:\\github\\Project_Imageprocessing_Trainmodel\\ui\\src\\components\\Main.js",[],"F:\\github\\Project_Imageprocessing_Trainmodel\\ui\\src\\components\\NavigationBar.js",[],"F:\\github\\Project_Imageprocessing_Trainmodel\\ui\\src\\components\\Dashboard.js",["32","33","34","35","36","37"],"import React, { Component } from 'react'\r\nimport { Container, Row, Col, Card, Button, Modal, FormControl, Spinner } from 'react-bootstrap'\r\nimport '../assets/main.css'\r\nimport axios from 'axios'\r\n\r\nexport class Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            models: [\r\n                {\r\n                    name: \"undefined\"\r\n                }\r\n            ],\r\n            isModelModalOpen: false,\r\n            isTestModalOpen: false,\r\n            dataToPassToModal: {\r\n                mode: null,\r\n                name: null\r\n            },\r\n            loading: true,\r\n            name: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getModel()\r\n    }\r\n\r\n    getModel = () => {\r\n        this.getModelAPI().then(res => {\r\n\r\n            console.log(res);\r\n            let models = []\r\n\r\n            res.models.forEach(model => {\r\n                models.push({ name: model })\r\n            })\r\n\r\n            this.setState({\r\n                models: models\r\n            }, () => this.setState({loading: false}))\r\n        })\r\n    }\r\n\r\n    getModelAPI = () => {\r\n        return axios.get(\"http://127.0.0.1:5000/get\").then(res => {\r\n            return res.data\r\n        })\r\n    }\r\n\r\n    _handleAddNewModel = () => {\r\n        const formData = new FormData();\r\n        formData.append(\"model\", this.state.name.toLowerCase());\r\n        axios({\r\n            method: \"POST\",\r\n            url: \"http://127.0.0.1:5000/add\",\r\n            data: formData,\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        }).then(res => {\r\n            console.log(res.data);\r\n            alert(res.data.msg)\r\n            this.getModel()\r\n        })\r\n    }\r\n\r\n    toggleModelModal = (data) => {\r\n        if(data)\r\n            this.setState({isModelModalOpen: !this.state.isModelModalOpen, dataToPassToModal: data})\r\n        else\r\n        this.setState({isModelModalOpen: !this.state.isModelModalOpen})\r\n    }\r\n\r\n    toggleTestModal = (data) => {\r\n        if(data)\r\n            this.setState({isTestModalOpen: !this.state.isTestModalOpen, dataToPassToModal: data})\r\n        else\r\n        this.setState({isTestModalOpen: !this.state.isTestModalOpen})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loading)\r\n            return (<></>)\r\n        return (\r\n            <Container fluid>\r\n                <ModelModal isOpen={this.state.isModelModalOpen} toggle={this.toggleModelModal} data={this.state.dataToPassToModal}/>\r\n                <TestModal isOpen={this.state.isTestModalOpen} toggle={this.toggleTestModal} data={this.state.dataToPassToModal}/>\r\n\r\n                <Row>\r\n                    <Col className=\"text-center m-1\" >\r\n                        <h5>Select Model</h5>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"justify-content-center d-flex flex-row flex-wrap\">\r\n                        { /** list models */}\r\n                        {\r\n                            this.state.models.map((model, index) => {\r\n                                return (\r\n                                    <Card className=\"m-1 text-center\" style={{ width: \"250px\" }} key={index}>\r\n                                        <Card.Body>\r\n                                            <h6>{model.name.toUpperCase()}</h6>\r\n                                        </Card.Body>\r\n                                        <Card.Footer>\r\n                                            <Button className=\"mx-1\" variant=\"outline-primary\" onClick={() => this.toggleModelModal({mode: 'train', name: model.name})}>Train</Button>\r\n                                            <Button className=\"mx-1\" variant=\"outline-success\" onClick={() => this.toggleTestModal({mode: 'test', name: model.name})}>Test</Button>\r\n                                        </Card.Footer>\r\n                                    </Card>\r\n                                )\r\n                            })\r\n                        }\r\n                        { /** Add new model */}\r\n                            <Card className=\"m-1 text-center add-new\" style={{ width: \"250px\" }}>\r\n                                <Card.Header><FormControl placeholder=\"model_name\" value={this.state.name} onChange={(e) => this.setState({name: e.target.value})}/></Card.Header>\r\n                                <Card.Body onClick={this._handleAddNewModel}>\r\n                                    <h1>+</h1>\r\n                                </Card.Body>\r\n                            </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nclass ModelModal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            files: [],\r\n            imagePreviewUrl: [],\r\n            loadingOverlay: false\r\n        }\r\n    }\r\n\r\n    _handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        let genFiles = this.state.genFiles\r\n        let fakeFiles = this.state.fakeFiles\r\n\r\n        const formData = new FormData();\r\n\r\n        Array.from(genFiles).forEach(file=>{\r\n            formData.append(\"genFiles\", file);\r\n        });\r\n\r\n        Array.from(fakeFiles).forEach(file=>{\r\n            formData.append(\"fakeFiles\", file);\r\n        });\r\n\r\n        formData.append(\"model\", this.props.data.name);\r\n\r\n        this.setState({loadingOverlay: true})\r\n\r\n        axios({\r\n            method: \"POST\",\r\n            url: \"http://127.0.0.1:5000/train\",\r\n            data: formData,\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        }).then(res => {\r\n            console.log(res);\r\n            this.setState({loadingOverlay: false}, () => {\r\n                alert(res.data.msg)\r\n                this._handleClose()\r\n            }\r\n            )\r\n        })\r\n    }\r\n\r\n    _handleImageChangeGen(e) {\r\n        e.preventDefault();\r\n        let files = e.target.files;\r\n        console.log(files);\r\n        this.setState({\r\n            genFiles: files\r\n        })\r\n    }\r\n\r\n    _handleImageChangeFake(e) {\r\n        e.preventDefault();\r\n        let files = e.target.files;\r\n        console.log(files);\r\n        this.setState({\r\n            fakeFiles: files\r\n        })\r\n    }\r\n\r\n    _handleClose = () => {\r\n        this.setState({\r\n            files: [],\r\n            imagePreviewUrl: []\r\n        }, () => this.props.toggle())\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal show={this.props.isOpen} onHide={this._handleClose}>\r\n                {\r\n                    this.state.loadingOverlay ? <LoadingOverlay /> : <></>\r\n                }\r\n                <Modal.Header closeButton>\r\n                <Modal.Title>{ this.props.data.mode != undefined ? this.props.data.mode.toUpperCase() : \"\" } : { this.props.data.name != undefined ? this.props.data.name.toUpperCase() : \"\" }</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <form onSubmit={(e)=>this._handleSubmit(e)}>\r\n                        <h5>Gen Signature</h5>\r\n                        <input className=\"\" \r\n                            type=\"file\" \r\n                            onChange={(e)=>this._handleImageChangeGen(e)} multiple=\"multiple\"/>\r\n                        <hr />\r\n                        <h5>Fake Signature</h5>\r\n                        <input className=\"\" \r\n                            type=\"file\" \r\n                            onChange={(e)=>this._handleImageChangeFake(e)} multiple=\"multiple\"/>\r\n                        <hr />\r\n                        <Button className=\"float-right\" variant=\"outline-primary\" type=\"submit\">\r\n                            { this.props.data.mode != undefined ? this.props.data.mode.toUpperCase() : \"undefined\" }\r\n                        </Button>\r\n                    </form>\r\n                    \r\n                </Modal.Body>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\nclass TestModal extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            files: [],\r\n            imagePreviewUrl: [],\r\n            loadingOverlay: false\r\n        }\r\n    }\r\n    _handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        let files = this.state.files\r\n\r\n        const formData = new FormData();\r\n\r\n        Array.from(files).forEach(file=>{\r\n            formData.append(\"testFiles\", file);\r\n        });\r\n\r\n        formData.append(\"model\", this.props.data.name);\r\n\r\n        this.setState({loadingOverlay: true})\r\n\r\n        axios({\r\n            method: \"POST\",\r\n            url: \"http://127.0.0.1:5000/test\",\r\n            data: formData,\r\n            headers: {\r\n              \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        }).then(res => {\r\n            console.log(res.data);\r\n            this.setState({loadingOverlay: false}, () => {\r\n                alert(\"SVM_result: \"+res.data.svm+\" MLP_result: \"+res.data.mlp+\" MV5_result: \"+res.data.mv5)\r\n                this.props.toggle()\r\n            }\r\n            )\r\n        })\r\n    }\r\n\r\n    _handleImageChange(e) {\r\n        e.preventDefault();\r\n        let files = e.target.files;\r\n        console.log(files);\r\n        this.setState({\r\n            files: files\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Modal show={this.props.isOpen} onHide={this.props.toggle}>\r\n                {\r\n                    this.state.loadingOverlay ? <LoadingOverlay /> : <></>\r\n                }\r\n                    <Modal.Header closeButton>\r\n                    <Modal.Title>{ this.props.data.mode != undefined ? this.props.data.mode.toUpperCase() : \"\" } : { this.props.data.name != undefined ? this.props.data.name.toUpperCase() : \"\" }</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <form onSubmit={(e)=>this._handleSubmit(e)}>\r\n                            <h5>Test Signature</h5>\r\n                            <input className=\"\" \r\n                                type=\"file\" \r\n                                onChange={(e)=>this._handleImageChange(e)} multiple=\"multiple\"/>\r\n                                <hr />\r\n                            <Button className=\"float-right\" variant=\"outline-primary\" type=\"submit\">\r\n                                { this.props.data.mode != undefined ? this.props.data.mode.toUpperCase() : \"undefined\" }\r\n                            </Button>\r\n                        </form>\r\n                        \r\n                    </Modal.Body>\r\n                </Modal>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nclass LoadingOverlay extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{position: 'fixed', top: '0', left: '0', width: '100%', height: '100vh', background: \"rgba(0, 0, 0, 0.8)\", zIndex: '999', display: 'grid', justifyContent: 'center', alignContent: 'center', gridGap: '1em'}}>\r\n              <Spinner animation=\"border\" variant=\"primary\" style={{ width: '5rem', height: '5rem', justifySelf: 'center'}} />\r\n              <text style={{ justifySelf: 'center', textShadow: \"rgba(0, 0, 0, 0.8)\"}}>L o a d i n g . . .</text>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dashboard\r\n",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":1,"column":8,"nodeType":"44","messageId":"45","endLine":1,"endColumn":12},{"ruleId":"46","severity":1,"message":"47","line":207,"column":53,"nodeType":"48","messageId":"49","endLine":207,"endColumn":55},{"ruleId":"46","severity":1,"message":"47","line":207,"column":135,"nodeType":"48","messageId":"49","endLine":207,"endColumn":137},{"ruleId":"46","severity":1,"message":"47","line":222,"column":52,"nodeType":"48","messageId":"49","endLine":222,"endColumn":54},{"ruleId":"46","severity":1,"message":"47","line":289,"column":57,"nodeType":"48","messageId":"49","endLine":289,"endColumn":59},{"ruleId":"46","severity":1,"message":"47","line":289,"column":139,"nodeType":"48","messageId":"49","endLine":289,"endColumn":141},{"ruleId":"46","severity":1,"message":"47","line":299,"column":56,"nodeType":"48","messageId":"49","endLine":299,"endColumn":58},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]